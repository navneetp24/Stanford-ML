function [J, grad] = lrCostFunction(theta, X, y, lambda)
m = length(y);
J = 0;
grad = zeros(size(theta));
h_theta = sigmoid(X * theta);
J = (1/m) * (((-1 * y') * log(h_theta)) - ((1-y') * log(1-h_theta))) + (lambda/(2*m)) * (sum(theta(2:end) .^ 2));
temp = theta;
temp(1) = 0;
grad = ((1 / m) * X' * (h_theta - y)) + (lambda / m) * temp;
grad = grad(:);
end

function [all_theta] = oneVsAll(X, y, num_labels, lambda)
m = size(X, 1);
n = size(X, 2);
all_theta = zeros(num_labels, n + 1); % 10 * 401
X = [ones(m, 1) X];
     initial_theta = zeros(n + 1, 1);


     options = optimset('GradObj', 'on', 'MaxIter', 50);


    for c = 1:num_labels
        all_theta(c,:) = fmincg (@(t)(lrCostFunction(t, X, (y == c), lambda)), initial_theta, options);
    end
end

function p = predictOneVsAll(all_theta, X)
m = size(X, 1);
num_labels = size(all_theta, 1); % 10
p = zeros(size(X, 1), 1); % 5000 * 1
X = [ones(m, 1) X]; % 5000 * 401
predict = sigmoid(X*all_theta'); % 5000 * 401 by 401*10
[~, p] = max(predict, [], 2);
end

function p = predict(Theta1, Theta2, X)
m = size(X, 1);
num_labels = size(Theta2, 1);
p = zeros(size(X, 1), 1);
X = [ones(m, 1) X];
t1 = sigmoid(X * Theta1');
t1 = [ones(m, 1) t1];
t2 = sigmoid( t1 * Theta2');
[~, p] = max(t2, [], 2);
end
